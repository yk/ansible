- hosts: gpu
  
  vars:
    torch_source_cmd: ". $HOME/torch/install/bin/torch-activate"
    cuda75_env:
      CUDA_ROOT: /usr/local/cuda-7.5
      CUDA_HOME: /usr/local/cuda-7.5
      CFLAGS: -I/usr/local/cuda-7.5/include 
      LDFLAGS: -L/usr/local/cuda-7.5/lib64 
      PATH: "/usr/local/cuda-7.5/bin:{{ ansible_env.PATH }}"
      LD_LIBRARY_PATH: "/usr/local/cuda-7.5/lib64:{{ ansible_env.LD_LIBRARY_PATH | default('') }}"

  tasks:
    - name: make files directory
      become: yes
      file: path=/local/files state=directory mode=0755

    - name: install gcc
      become: yes
      shell: dnf install gcc-4.9.2 gcc-c++-4.9.2 gcc-gfortran-4.9.2 libstdc++ libstdc++-devel libstdc++-static --releasever=21 --allowerasing -y creates=/usr/lib/gcc/x86_64-redhat-linux/4.9.2/libstdc++.so

    - name: install dnf packages
      become: yes
      dnf: name=nano,freetype,freetype-devel,lapack,lapack-devel,blas,blas-devel,libffi,libffi-devel,libpng,libpng-devel,libtiff-devel,libjpeg-turbo-devel,libzip-devel,lcms2-devel,libwebp-devel,tcl-devel,tk-devel,openssl-devel,wget,curl,vim,python,python3,swig,zip,unzip,python-devel,python3-devel,python-tools,python3-tools,git,java-1.8.0-openjdk-devel,zlib-devel,screen,openblas-devel,atlas-devel,protobuf-devel,leveldb-devel,snappy-devel,lmdb-devel,opencv-devel,boost-devel,hdf5-devel,gflags-devel,glog-devel,kernel-devel,kernel-headers,dkms,acpid,emacs,boost-devel,zsh,cmake,htop,python-ipython,python3-ipython,pcre,graphviz,ctags,autojump,autojump-zsh,libevent,libevent-devel,readline-devel,ncurses-devel,gnuplot,nodejs,npm,ImageMagick,GraphicsMagick-devel,fftw-devel,sox-devel,sox,qt-devel,qtwebkit-devel,czmq,czmq-devel,automake,autoconf,autoconf-archive,libtool,double-conversion-devel,libtool,lz4-devel,lzma-devel,snappy-devel,numactl-libs,numactl-devel,flex,flex-devel,bison,bison-devel,libatomic,cyrus-sasl,cyrus-sasl-devel,libedit,libedit-devel,matio,matio-devel,cowsay,sl,mosh,docker,smem state=present


    - name: download llvm source
      get_url: url=http://llvm.org/releases/3.7.0/llvm-3.7.0.src.tar.xz dest={{ ansible_env.HOME }}/llvm.tar.xz

    - name: unpack llvm source
      unarchive: src={{ ansible_env.HOME }}/llvm.tar.xz dest={{ ansible_env.HOME }} creates={{ ansible_env.HOME }}/llvm-3.7.0.src/configure copy=no

    - name: build llvm
      shell: cd llvm-3.7.0.src && mkdir -p build && cd build && cmake .. && cmake --build . creates={{ ansible_env.HOME }}/llvm-3.7.0.src/build/lib/LLVMHello.so

    - name: install llvm
      become: yes
      shell: cd llvm-3.7.0.src/build && cmake --build . --target install creates=/usr/local/bin/llvm-ar

    - name: add rpmfusion free
      become: yes
      dnf: name=http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-22.noarch.rpm state=present

    - include: ../../common/tasks/python-defaults.yml
    - include: ../../common/tasks/python3-defaults.yml

    - name: blacklist nouveau
      become: yes
      kernel_blacklist: name=nouveau state=present
      register: blnouveau

    - include: ../../common/tasks/reboot.yml
      when: blnouveau.changed

    - name: download nvidia driver installer
      get_url: url=http://us.download.nvidia.com/XFree86/Linux-x86_64/358.16/NVIDIA-Linux-x86_64-358.16.run dest={{ ansible_env.HOME }}/nvidia.run mode=0544

    - name: install nvidia driver
      become: yes
      command: "{{ ansible_env.HOME }}/nvidia.run -s"
      args:
        creates: /usr/bin/nvidia-installer
      register: nvidiadriver

    - include: ../../common/tasks/reboot.yml
      when: nvidiadriver.changed

    - name: install cuda repositories
      become: yes
      dnf: name=http://developer.download.nvidia.com/compute/cuda/repos/fedora21/x86_64/cuda-repo-fedora21-7.5-18.x86_64.rpm state=present

    - name: install cuda75
      become: yes
      dnf: name=cuda-7-5 state=present

    #- name: install cuda7 
      #become: yes
      #dnf: name=cuda-7-0 state=present

    - name: symlink cuda to cuda7.5
      become: yes
      file: src=/usr/local/cuda-7.5 dest=/usr/local/cuda state=link

    #- name: make cuda7 accept gcc5
      #become: yes
      #lineinfile: line='//#error -- unsupported GNU version! gcc versions later than 4.9 are not supported!' regexp="unsupported GNU version" dest=/usr/local/cuda-7.0/include/host_config.h

    - name: make cuda75 accept gcc5
      become: yes
      lineinfile: line='//#error -- unsupported GNU version! gcc versions later than 4.9 are not supported!' regexp="unsupported GNU version" dest=/usr/local/cuda-7.5/include/host_config.h

    - name: install pycuda
      become: yes
      pip: name=pycuda executable=/usr/bin/pip2
      environment: "{{cuda75_env}}"

    - name: install pycuda3
      become: yes
      pip: name=pycuda executable=/usr/bin/pip3
      environment: "{{cuda75_env}}"

    - name: copy cudnn4
      become: yes
      copy: src=../files/cudnn4.tgz dest=/local/files/cudnn4.tgz mode=0755

    - name: make cudnn4 dir
      file: path={{ ansible_env.HOME }}/cudnn4 state=directory

    - name: extract cudnn4
      unarchive: src=/local/files/cudnn4.tgz dest={{ ansible_env.HOME }}/cudnn4 creates={{ ansible_env.HOME }}/cudnn4/cuda/include/cudnn.h copy=no

    - name: copy cudnn4 files
      become: yes
      shell: cp {{ ansible_env.HOME }}/cudnn4/cuda/include/* /usr/local/cuda-7.5/include/ && cp {{ ansible_env.HOME }}/cudnn4/cuda/lib64/* /usr/local/cuda-7.5/lib64/ creates=/usr/local/cuda-7.5/include/cudnn.h

    #- name: copy cudnn2
      #become: yes
      #copy: src=../files/cudnn2.tgz dest=/local/files/cudnn2.tgz mode=0755

    #- name: copy cudnn3
      #become: yes
      #copy: src=../files/cudnn3.tgz dest=/local/files/cudnn3.tgz mode=0755

    #- name: extract cudnn2
      #unarchive: src=/local/files/cudnn2.tgz dest={{ ansible_env.HOME }} creates={{ ansible_env.HOME }}/cudnn-6.5-linux-x64-v2/cudnn.h copy=no

    #- name: copy cudnn2 files
      #become: yes
      #shell: cp {{ ansible_env.HOME }}/cudnn-6.5*/libcudnn* /usr/local/cuda-7.0/lib64/ && cp {{ ansible_env.HOME }}/cudnn-6.5*/cudnn.h /usr/local/cuda-7.0/include/ creates=/usr/local/cuda-7.0/include/cudnn.h

    #- name: make cudnn3 dir
      #file: path={{ ansible_env.HOME }}/cudnn3 state=directory

    #- name: extract cudnn3
      #unarchive: src=/local/files/cudnn3.tgz dest={{ ansible_env.HOME }}/cudnn3 creates={{ ansible_env.HOME }}/cudnn3/cuda/include/cudnn.h copy=no

    #- name: copy cudnn3 files
      #become: yes
      #shell: cp {{ ansible_env.HOME }}/cudnn3/cuda/include/* /usr/local/cuda-7.5/include/ && cp {{ ansible_env.HOME }}/cudnn3/cuda/lib64/* /usr/local/cuda-7.5/lib64/ creates=/usr/local/cuda-7.5/include/cudnn.h

    #- name: download bazel
      #get_url: url=https://github.com/bazelbuild/bazel/releases/download/0.1.4/bazel-0.1.4-installer-linux-x86_64.sh dest={{ ansible_env.HOME }}/bazel.sh mode=0544
    
    #- name: install bazel
      #become: yes
      #command: "{{ ansible_env.HOME }}/bazel.sh creates=/usr/local/bin/bazel"

    #- name: install tensorflow python2
      #become: yes
      #pip: name=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.6.0-cp27-none-linux_x86_64.whl executable=/usr/bin/pip2
      #environment: "{{cuda_env}}"

    #- name: install tensorflow python3
      #become: yes
      #pip: name=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.6.0-cp34-none-linux_x86_64.whl executable=/usr/bin/pip3
      #environment: "{{cuda_env}}"
    
    - name: make skel bin dir
      become: yes
      file: path=/etc/skel/bin state=directory mode=0755

    - name: modify path to contain cuda stuff
      become: yes
      lineinfile: dest=/etc/skel/.bashrc line='export PATH="/usr/local/cuda/bin:$PATH"'

    - name: modify library path to contain cuda stuff
      become: yes
      lineinfile: dest=/etc/skel/.bashrc line='export LD_LIBRARY_PATH="/usr/local/cuda/lib64:$LD_LIBRARY_PATH"'

    - name: add cuda include dir to bashrc
      become: yes
      lineinfile: dest=/etc/skel/.bashrc line='export CUDA_ROOT="/usr/local/cuda"'

    - name: add cuda include dir to bashrc
      become: yes
      lineinfile: dest=/etc/skel/.bashrc line='export CUDA_HOME="/usr/local/cuda"'

    - name: modify path to contain HOME/bin
      become: yes
      lineinfile: dest=/etc/skel/.bashrc line='export PATH="$HOME/bin:$PATH"'

    - name: make hofmann-scratch folder in media
      become: yes
      file: path=/media/hofmann-scratch state=directory

    - name: modify fstab to contain scratch
      become: yes
      lineinfile: dest=/etc/fstab line='scratch-hofmann.inf.ethz.ch:/export/scratch/hofmann/dataset /media/hofmann-scratch nfs defaults 0 0'

    - include: ../../common/tasks/tmux_from_source.yml
    - include: ../../common/tasks/install_tmux.yml

    - name: clone torch repository
      git: repo=https://github.com/torch/distro.git dest={{ ansible_env.HOME }}/torch update=no

    - name: install torch
      environment: "{{ cuda75_env }}"
      shell: cd {{ ansible_env.HOME }}/torch && ./install.sh -b -s creates={{ ansible_env.HOME }}/torch/install/bin/torch-activate

    - name: clone folly repository
      git: repo=https://github.com/facebook/folly.git dest={{ ansible_env.HOME }}/folly depth=1 version=v0.35.0 update=no

    - name: change folly build
      lineinfile: "dest={{ ansible_env.HOME }}/folly/folly/m4/ax_boost_context.m4 regexp='fcontext_t' line='                [[boost::context::fcontext_t fc = boost::context::make_fcontext(0, 0, 0);]])],'"

    - name: build folly
      shell: cd folly/folly && autoreconf -ivf && ./configure && make creates={{ ansible_env.HOME }}/folly/folly/.libs/libfolly.so

    - name: install folly
      become: yes
      shell: cd folly/folly && make install && ldconfig creates=/usr/local/lib/libfolly.so

    - name: clone fbthrift repository
      git: repo=https://github.com/facebook/fbthrift.git dest={{ ansible_env.HOME }}/fbthrift depth=1 version=v0.24.0 update=no

    - name: build fbthrift
      shell: cd fbthrift/thrift && autoreconf -ivf && ./configure && make creates={{ ansible_env.HOME }}/fbthrift/thrift/lib/cpp2/.libs/libthriftcpp2.so

    - name: install fbthrift
      become: yes
      shell: cd fbthrift/thrift && make install creates=/usr/local/lib/libthriftcpp2.so

    - name: clone thpp repository
      git: repo=https://github.com/facebook/thpp dest={{ ansible_env.HOME }}/thpp update=no

    - name: change thpp build
      lineinfile: "dest={{ ansible_env.HOME }}/thpp/thpp/build.sh line='sudo make install' state=absent"

    - name: build thpp
      shell: "{{ torch_source_cmd }} && cd thpp/thpp && ./build.sh creates={{ ansible_env.HOME }}/thpp/thpp/build/libthpp.so"

    - name: install thpp
      become: yes
      shell: cd thpp/thpp/build && make install creates=/usr/local/lib/libthpp.so

    - name: clone fblualib repository
      git: repo=https://github.com/soumith/fblualib dest={{ ansible_env.HOME }}/fblualib update=no

    - name: build fblualib
      shell: "{{ torch_source_cmd }} && cd fblualib/fblualib && mkdir -p build && cd build && cmake .. && make creates={{ ansible_env.HOME }}/fblualib/fblualib/build/libfblualib.so"

    - name: install fblualib
      become: yes
      shell: cd fblualib/fblualib/build && make install creates=/usr/local/lib/libfblualib.so

    - name: install ansible2
      become: yes
      pip: name=ansible executable=/usr/bin/pip2

    - name: clone nccl
      git: repo=https://github.com/NVIDIA/nccl.git dest={{ ansible_env.HOME }}/nccl

    - name: build nccl
      shell: cd nccl && make creates={{ ansible_env.HOME }}/nccl/build/lib/libnccl.so
      environment: "{{ cuda75_env }}"

    - name: install nccl
      become: yes
      shell: cd nccl && make install creates=/usr/local/lib/libnccl.so
      environment: "{{ cuda75_env }}"

    - name: allow mosh
      become: yes
      lineinfile: "dest=/etc/sysconfig/iptables line='-A INPUT -p udp -m multiport --dports 60000:61000 -j ACCEPT' insertafter='ESTABLISHED'"
      register: allowmosh

    - name: restart iptables
      become: yes
      service: name=iptables enabled=yes state=restarted
      when: allowmosh.changed

    - name: ensure docker running
      become: yes
      service: name=docker enabled=yes state=started

    - name: install docker-py
      become: yes
      pip: name=docker-py executable=/usr/bin/pip2
