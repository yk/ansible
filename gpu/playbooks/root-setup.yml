-   hosts: gpu
    
    vars:
        cuda_env:
            CUDA_ROOT: /usr/local/cuda
            CUDA_HOME: /usr/local/cuda
            CFLAGS: -I/usr/local/cuda/include 
            LDFLAGS: -L/usr/local/cuda/lib64 
            PATH: "{{ ansible_env.PATH }}:/usr/local/cuda/bin"
            LD_LIBRARY_PATH: "{{ ansible_env.LD_LIBRARY_PATH }}:/usr/local/cuda/lib64"

    tasks:
        -   name: make files directory
            sudo: yes
            file: path=/local/files state=directory mode=0755

        -   name: install gcc
            sudo: yes
            shell: dnf install gcc-4.9.2 gcc-c++-4.9.2 gcc-gfortran-4.9.2 --releasever=21 --allowerasing -y creates=/usr/lib/gcc/x86_64-redhat-linux/4.9.2/libstdc++.so

        -   name: install dnf packages
            sudo: yes
            dnf: name=nano,freetype,freetype-devel,lapack,lapack-devel,blas,blas-devel,libffi,libffi-devel,libpng,libpng-devel,libtiff-devel,libjpeg-turbo-devel,libzip-devel,lcms2-devel,libwebp-devel,tcl-devel,tk-devel,openssl-devel,wget,curl,vim,python,python3,swig,zip,unzip,python-devel,python3-devel,git,java-1.8.0-openjdk-devel,zlib-devel,screen,openblas-devel,atlas-devel,protobuf-devel,leveldb-devel,snappy-devel,lmdb-devel,opencv-devel,boost-devel,hdf5-devel,gflags-devel,glog-devel,kernel-devel,kernel-headers,dkms,acpid,emacs,boost-devel,zsh,cmake,htop,python-ipython,python3-ipython,tmux,pcre state=present

        -   name: add rpmfusion free
            sudo: yes
            dnf: name=http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-22.noarch.rpm state=present

        -   include: ../../common/tasks/python-defaults.yml
        -   include: ../../common/tasks/python3-defaults.yml

        -   name: blacklist nouveau
            sudo: yes
            kernel_blacklist: name=nouveau state=present
            register: blnouveau

        -   include: ../../common/tasks/reboot.yml
            when: blnouveau.changed

        -   name: download nvidia driver installer
            get_url: url=http://us.download.nvidia.com/XFree86/Linux-x86_64/358.16/NVIDIA-Linux-x86_64-358.16.run dest={{ ansible_env.HOME }}/nvidia.run mode=0544

        -   name: install nvidia driver
            sudo: yes
            command: "{{ ansible_env.HOME }}/nvidia.run -s"
            args:
                creates: /usr/bin/nvidia-installer
            register: nvidiadriver

        -   include: ../../common/tasks/reboot.yml
            when: nvidiadriver.changed

        -   name: install cuda repositories
            sudo: yes
            dnf: name=http://developer.download.nvidia.com/compute/cuda/repos/fedora21/x86_64/cuda-repo-fedora21-7.5-18.x86_64.rpm state=present

        -   name: install cuda 
            sudo: yes
            dnf: name=cuda-7-0 state=present

        -   name: make cuda accept gcc5
            sudo: yes
            lineinfile: line='//#error -- unsupported GNU version! gcc versions later than 4.9 are not supported!' regexp="unsupported GNU version" dest=/usr/local/cuda/include/host_config.h

        -   name: install pycuda
            sudo: yes
            pip: name=pycuda executable=/usr/bin/pip2
            environment: "{{cuda_env}}"

        -   name: install pycuda3
            sudo: yes
            pip: name=pycuda executable=/usr/bin/pip3
            environment: "{{cuda_env}}"

        -   name: copy cudnn2
            sudo: yes
            copy: src=../files/cudnn2.tgz dest=/local/files/cudnn2.tgz mode=0755

        -   name: copy cudnn3
            sudo: yes
            copy: src=../files/cudnn3.tgz dest=/local/files/cudnn3.tgz mode=0755

        -   name: extract cudnn
            unarchive: src=/local/files/cudnn2.tgz dest={{ ansible_env.HOME }} creates={{ ansible_env.HOME }}/cudnn-6.5-linux-x64-v2/cudnn.h copy=no

        -   name: copy cudnn files
            sudo: yes
            shell: cp {{ ansible_env.HOME }}/cudnn-6.5*/libcudnn* /usr/local/cuda/lib64/ && cp {{ ansible_env.HOME }}/cudnn-6.5*/cudnn.h /usr/local/cuda/include/ creates=/usr/local/cuda/include/cudnn.h
            

        -   name: download bazel
            get_url: url=https://github.com/bazelbuild/bazel/releases/download/0.1.2/bazel-0.1.2-installer-linux-x86_64.sh dest={{ ansible_env.HOME }}/bazel.sh mode=0544
        
        -   name: install bazel
            sudo: yes
            command: "{{ ansible_env.HOME }}/bazel.sh creates=/usr/local/bin/bazel"

        -   name: install tensorflow python2
            sudo: yes
            pip: name=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.6.0-cp27-none-linux_x86_64.whl executable=/usr/bin/pip2
            environment: "{{cuda_env}}"

        -   name: install tensorflow python3
            sudo: yes
            pip: name=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.6.0-cp34-none-linux_x86_64.whl executable=/usr/bin/pip3
            environment: "{{cuda_env}}"
        
        -   name: make skel bin dir
            sudo: yes
            file: path=/etc/skel/bin state=directory mode=0755

        -   name: modify path to contain cuda stuff
            sudo: yes
            lineinfile: dest=/etc/skel/.bashrc line='export PATH="/usr/local/cuda/bin:$PATH"'

        -   name: modify library path to contain cuda stuff
            sudo: yes
            lineinfile: dest=/etc/skel/.bashrc line='export LD_LIBRARY_PATH="/usr/local/cuda/lib64:$LD_LIBRARY_PATH"'

        -   name: add cuda include dir to bashrc
            sudo: yes
            lineinfile: dest=/etc/skel/.bashrc line='export CUDA_ROOT="/usr/local/cuda"'

        -   name: add cuda include dir to bashrc
            sudo: yes
            lineinfile: dest=/etc/skel/.bashrc line='export CUDA_HOME="/usr/local/cuda"'

        -   name: modify path to contain HOME/bin
            sudo: yes
            lineinfile: dest=/etc/skel/.bashrc line='export PATH="$HOME/bin:$PATH"'
